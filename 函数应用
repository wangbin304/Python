（一）几个普通的小练习
1）实现计算求最大公约数和最小公倍数的函数。
#python-flask
python for flask
'''python
def gcd(x,y):  #最大公约数
    (x,y)=(y,x) if x>y else (x,y)
    for a in range(x,0,-1):
        if(x%a==0 and y%a==0):
            return a
def lcm(x,y):  #最小公倍数
    return x*y//gcd(x,y)
'''
2）实现判断一个数是不是回文数的函数。

def is_huiwenshu(num):
    temp=num
    t=0
    while(temp):
        t=t*10+temp%10
        temp//=10
    return t==num

3）实现判断一个数是不是素数的函数。
from math import sqrt
def is_sushu(num):
    a=int(sqrt(num))
    flag=0
    for temp in range (2,a+1):
        if(num%temp==0):
            flag=1
            break
    return flag==0 and num!=1
    
4）写一个程序判断输入的正整数是不是回文素数。

from math import sqrt
def is_huiwensushu(num):
    temp=num
    t=0
    while temp:
        t=t*10+temp%10
        temp//=10
    flag=0
    if(t==num):
        for x in range(2,int(sqrt(num))+1):
            if(num%x==0):
                flag=1
        return flag==0 and num!=1
    else:
        return False
或者是我们将代码中重复出现的和相对独立的功能抽取成函数后，组合使用这些函数来解决更为复杂的问题

def is_palindrome(num):  #判断是否为回文正整数
    temp = num
    total = 0
    while temp > 0:
        total = total * 10 + temp % 10
        temp //= 10
    return total == num
def is_prime(num):  #判断是否为素数
    for factor in range(2, num):
        if num % factor == 0:
            return False
    return True if num != 1 else False
if __name__ == '__main__':                  #注意此处的name 和 main 是  __name__ __main__ 两边均是双下划线
    num = int(input('请输入正整数: '))
if is_palindrome(num) and is_prime(num):
    print('%d是回文素数' % num)
else:
    print('%d不是回文素数'%num)
    
    
（二）
 用模块管理函数
对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，
因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，
由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。
def foo():
    print('hello, world!')


def foo():
    print('goodbye, world!')


# 下面的代码会输出什么呢？
foo()
当然上面的这种情况我们很容易就能避免，
但是如果项目是由多人协作进行团队开发的时候，
团队中可能有多个程序员都定义了名为foo的函数，那么怎么解决这种命名冲突呢？
答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，
在使用函数的时候我们通过import关键字导入指定的模块就可以区分到底要使用的是哪个模块中的foo函数，代码如下所示。

module1.py
def foo():
    print('hello, world!')
    
    
module2.py
def foo():
    print('goodbye, world!')


test.py
from module1 import foo

# 输出hello, world!
foo()

from module2 import foo

# 输出goodbye, world!
foo()

也可以按照如下所示的方式来区分到底要使用哪一个foo函数。
test.py
import module1 as m1
import module2 as m2

m1.foo()
m2.foo()


但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个foo，因为后导入的foo覆盖了之前导入的foo。
test.py
from module1 import foo
from module2 import foo

# 输出goodbye, world!
foo()


test.py
from module2 import foo
from module1 import foo

# 输出hello, world!
foo()
需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，
那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，
因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，
这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是“__main__”。  //此处两边是双下划线

module3.py

def foo():
    pass
def bar():
    pass
# __name__是Python中一个隐含的变量它代表了模块的名字
# 只有被Python解释器直接执行的模块的名字才是__main__
if __name__ == '__main__':
    print('call foo()')
    foo()
    print('call bar()')
    bar()
    
    
test.py
import module3

# 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__



（三）
Python中有关变量作用域的问题

def foo():
    b='hello'
    def bar(): #python 中可以在函数内部再定义函数
        c=True
        print(a)
        print(b)
        print(c)
    bar()
    #print(c)  #name 'c' is not defined
if __name__=='__main__':
    a=100
    #print(b)  #name 'b' is not defined
    foo()

上面代码的if分支中定义了一个变量a，这是一个全局变量（global variable），属于全局作用域，
因为它没有定义在任何一个函数中。在上面的foo函数中我们定义了变量b，这是一个定义在函数中的局部变量（local variable），
属于局部作用域，在foo函数的外部并不能访问到它；但对于foo函数内部的bar函数来说，变量b属于嵌套作用域，在bar函数中我们是可以访问到它的。
bar函数中的变量c属于局部作用域，在bar函数之外是无法访问的。
事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索
